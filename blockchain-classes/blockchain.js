const Block = require('./block'); //Access 'Block's static methods


class Blockchain{
    //Blockchains Constructor. An array called chains is made
    //with the Genisis block being the first block added
    constructor() {
        this.chain = [Block.genesisBlock()];
    }

    //Adds a block to the blockchain. Data which will be votes is
    //passed in. It takes the last block in the array and creates a
    //new block by calling the mineBlock() function. It then adds it
    //onto the array
    addBlock(data){
        const lastBlock = this.chain[this.chain.length-1];
        const block = Block.mineBlock(lastBlock, data);
        this.chain.push(block);

        return block;
    }

    //For nodes mining the blockchain(validating it), they have to check
    //if an incoming chain is valid.
    isValidChain(chain){

        //The first block in the blockchain always has to be the genesis 
        //block. This tests to see if the chain passed to it has a block 
        //at the first index with the same string represntation of 
        //a genesis block
        if(JSON.stringify(chain[0]) !== JSON.stringify(Block.genesisBlock()))
            return false;

        
        //A check will have to be done to check of the current blocks
        //last hash is equal to the last blocks hash. If not the chain
        //is also invalid
        for(let i = 1; i < chain.length; i++){
            const block = chain[i];
            const lastBlock = chain[i-1];

            if(block.lastHash !== lastBlock.hash ||
               block.hash !== Block.getBlockHash(block)) {
                return false;
               }
            // ^^^^^^
            //An actual blocks data could be tampered with so we 
            //need to check if the hash is correct. If the data has
            //been tampered with its hash wont match the hash
            //generated by the getBlockHash() in the block.js
        }

        return true;
    }

    //This method will replace an instance of the blockchains chain
    //if the chain has been updated elsewhere from a different instance.
    // E.g. A different minder node / polling station
    replaceChain(incomingChain) {
        if (incomingChain.length <= this.chain.length)
        {
          console.log('Incoming chain is not longer than the current chain.');
          return;
        } 
        else if (!this.isValidChain(incomingChain)) 
        {
          console.log('The Incoming chain is not valid.');
          return;
        }
      
        console.log('Replacing blockchain with the Incoming chain.');
        this.chain = incomingChain;
      }
      
}

module.exports = Blockchain;